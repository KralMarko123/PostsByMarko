name: PostsByMarko.Host Workflow

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SQL_PORT: ${{ vars.SQL_PORT }}
  HOST_PORT: ${{ vars.HOST_PORT }}
  CLIENT_PORT: ${{ vars.CLIENT_PORT }}

jobs:
  run-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Define database service
    services:
      database:
        image: postgres:17
        env: 
          POSTGRES_DB: postsbymarko
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Install dependencies
      run: dotnet restore
    
    - name: Build projects
      run: dotnet build --no-restore

    # Wait for database service to be up
    - name: Wait for database to be ready
      run: |
        for i in {1..10}; do
          nc -z localhost 5432 && echo "Database is up" && exit 0
          echo "Waiting for database..."
          sleep 5
        done
        echo "Database failed to start" && exit 1

    # Run coverage script instead of running unit & integration tests separately
    - name: Run test coverage script
      shell: pwsh
      run: ./scripts/execute_test_coverage.ps1

    # Upload the HTML coverage report
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/Coverage/Report

    # Generate summary JSON for badge
    - name: Generate coverage summary
      id: coverage
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: TestResults/Coverage/Report/Cobertura.xml
        badge: true
        format: markdown
        output: both

    # Generate badge JSON manually and update the Gist
    - name: Update coverage badge gist
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸŸ¢ Generating badge JSON..."
        jq -n --arg msg "${{ steps.coverage.outputs.badge }}" \
              --arg col "${{ steps.coverage.outputs.color }}" \
              '{schemaVersion:1,label:"Coverage",message:$msg,color:$col}' > badge.json

        echo "ðŸŸ¢ Patching Gist..."
        curl -s -X PATCH \
          -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
          -d "{\"files\": { \"postsbymarko-coverage.json\": {\"content\": $(jq -Rs . badge.json) }}}" \
          https://api.github.com/gists/${{ secrets.COVERAGE_GIST_ID }}

        echo "âœ… Gist badge updated successfully!"

    # Update README badge only if coverage value changed
    - name: Update README badge if needed
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸŸ¢ Checking if README badge update is needed..."

        BADGE_URL="https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/KralMarko123/${{ secrets.COVERAGE_GIST_ID }}/raw/postsbymarko-coverage.json"
        COVERAGE_VALUE="${{ steps.coverage.outputs.badge || 'N/A' }}"

        # Find current badge coverage value in README
        CURRENT_VALUE=$(grep -oP 'Coverage.*\)\K[^\)]*' README.md | grep -oP '[0-9]+%' || echo "none")

        echo "Current coverage in README: $CURRENT_VALUE"
        echo "New coverage from report: $COVERAGE_VALUE"

        if [ "$CURRENT_VALUE" != "$COVERAGE_VALUE" ]; then
          echo "ðŸŸ¢ Updating README badge..."
          if grep -q "img.shields.io/endpoint" README.md; then
            sed -i "s|!\[Coverage\](.*)|![Coverage](${BADGE_URL})|" README.md
          else
            echo "\n![Coverage](${BADGE_URL})" >> README.md
          fi

          echo "ðŸŸ¢ Committing README badge update..."
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "chore: update coverage badge to ${COVERAGE_VALUE} [skip ci]" || echo "No changes to commit"
          git push origin main
        else
          echo "âœ… Coverage unchanged ($COVERAGE_VALUE) â€” skipping README update."
        fi


