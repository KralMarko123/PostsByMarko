name: PostsByMarko.Host Workflow

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SQL_PORT: ${{ vars.SQL_PORT }}
  HOST_PORT: ${{ vars.HOST_PORT }}
  CLIENT_PORT: ${{ vars.CLIENT_PORT }}

jobs:
  run-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Define database service
    services:
      database:
        image: postgres:17
        env: 
          POSTGRES_DB: postsbymarko
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Install dependencies
      run: dotnet restore
    
    - name: Build projects
      run: dotnet build --no-restore

    # Wait for database service to be up
    - name: Wait for database to be ready
      run: |
        for i in {1..10}; do
          nc -z localhost 5432 && echo "Database is up" && exit 0
          echo "Waiting for database..."
          sleep 5
        done
        echo "Database failed to start" && exit 1

    # Run coverage script instead of running unit & integration tests separately
    - name: Run test coverage script
      shell: pwsh
      run: ./scripts/execute_test_coverage.ps1

    # Upload the HTML coverage report
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/Coverage/Report

    # Generate summary JSON for badge
    - name: Generate coverage summary
      id: coverage
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: TestResults/Coverage/Report/Cobertura.xml
        badge: true
        format: markdown
        output: both

    # Extract coverage value from previous step and update badge README if necessary
    - name: Extract coverage value and update badge
      if: github.ref == 'refs/heads/main'
      run: |
        set -e

        SUMMARY_FILE="code-coverage-results.md"
        echo "ðŸŸ¢ Show first lines of summary for context:"
        head -n 20 "$SUMMARY_FILE" || true

        echo "ðŸŸ¢ Extract numeric coverage from summary..."
        # Uses Python to find the line that starts with '**Summary**'
        # and extract the first integer before a '%' on that line.

        COVERAGE_VALUE=$(python3 - << 'PY'
        import re, sys
        path="code-coverage-results.md"
        try:
            with open(path, encoding="utf-8") as f:
                for line in f:
                    if line.lstrip().startswith("**Summary**"):
                        m = re.search(r'\*\*Summary\*\*.*?\*\*(\d+)%\*', line)
                        if m:
                            print(m.group(1))
                            sys.exit(0)
        except FileNotFoundError:
            pass
        print("0")
        PY
        )

        echo "Extracted coverage: ${COVERAGE_VALUE}%"

        # Determine badge color
        if [ "$COVERAGE_VALUE" -ge 90 ]; then
          BADGE_COLOR="brightgreen"
        elif [ "$COVERAGE_VALUE" -ge 75 ]; then
          BADGE_COLOR="yellowgreen"
        elif [ "$COVERAGE_VALUE" -ge 50 ]; then
          BADGE_COLOR="orange"
        else
          BADGE_COLOR="red"
        fi

        echo "Badge color: $BADGE_COLOR"

        echo "ðŸŸ¢ Create badge JSON"
        jq -n \
          --arg msg "${COVERAGE_VALUE}%" \
          --arg col "$BADGE_COLOR" \
          '{schemaVersion:1,label:"Coverage",message:$msg,color:$col}' > badge.json

        echo "badge.json:"
        cat badge.json

        echo "ðŸŸ¢ Patch Gist"
        curl -s -X PATCH \
          -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
          -d "{\"files\": { \"postsbymarko-coverage.json\": {\"content\": $(jq -Rs . badge.json) }}}" \
          https://api.github.com/gists/${{ secrets.COVERAGE_GIST_ID }} \
          > /dev/null

        echo "âœ… Gist updated"

        # Store for next step through the environment file
        echo "COVERAGE_VALUE=${COVERAGE_VALUE}" >> $GITHUB_ENV

    - name: Update README badge
      if: github.ref == 'refs/heads/main'
      run: |
        set -e

        BADGE_URL="https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/KralMarko123/${{ secrets.COVERAGE_GIST_ID }}/raw/postsbymarko-coverage.json"
        echo "Badge URL: $BADGE_URL"

        # Replace or append badge line every time
        if grep -qE '^!\[Coverage\]\(' README.md; then
          sed -i -E "s|^!\[Coverage\]\([^)]+\)|![Coverage](${BADGE_URL})|g" README.md
        else
          printf "\n![Coverage](%s)\n" "$BADGE_URL" >> README.md
        fi

        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add README.md
        git commit -m "chore: refresh coverage badge to ${COVERAGE_VALUE}% [skip ci]" || echo "No changes"
        git push origin main