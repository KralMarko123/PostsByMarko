name: PostsByMarko.Host Workflow

on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SQL_PORT: ${{ vars.SQL_PORT }}
  HOST_PORT: ${{ vars.HOST_PORT }}
  CLIENT_PORT: ${{ vars.CLIENT_PORT }}

jobs:
  run-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Define database service
    services:
      database:
        image: postgres:17
        env: 
          POSTGRES_DB: postsbymarko
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
        ports: 
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Install dependencies
      run: dotnet restore
    
    - name: Build projects
      run: dotnet build --no-restore

    # Wait for database service to be up
    - name: Wait for database to be ready
      run: |
        for i in {1..10}; do
          nc -z localhost 5432 && echo "Database is up" && exit 0
          echo "Waiting for database..."
          sleep 5
        done
        echo "Database failed to start" && exit 1

    # Run coverage script instead of running unit & integration tests separately
    - name: Run test coverage script
      shell: pwsh
      run: ./scripts/execute_test_coverage.ps1

    # Upload the HTML coverage report
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/Coverage/Report

    # Generate summary JSON for badge
    - name: Generate coverage summary
      id: coverage
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: TestResults/Coverage/Report/**/[Cc]obertura.xml
        badge: true
        format: markdown
        output: both

    # Create a badge file in the repo (coverage.svg)
    - name: Create coverage badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_TOKEN }}
        gistID: ${{ secrets.COVERAGE_GIST_ID }}
        filename: coverage-badge.json
        label: Coverage
        message: ${{ steps.coverage.outputs.badge || 'N/A' }}
        color: ${{ steps.coverage.outputs.color || 'lightgrey' }}

