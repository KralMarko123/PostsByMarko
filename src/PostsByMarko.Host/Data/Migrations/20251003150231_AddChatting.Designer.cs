// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostsByMarko.Host.Data;

#nullable disable

namespace PostsByMarko.Host.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251003150231_AddChatting")]
    partial class AddChatting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "13b641a9-5875-4974-b1c9-645e98288f70",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fc516090-f789-4cdc-96f0-e760d98faae9",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "25a4ec9f-50dd-44fc-89d1-a7685e022306",
                            RoleId = "13b641a9-5875-4974-b1c9-645e98288f70"
                        },
                        new
                        {
                            UserId = "25a4ec9f-50dd-44fc-89d1-a7685e022306",
                            RoleId = "fc516090-f789-4cdc-96f0-e760d98faae9"
                        },
                        new
                        {
                            UserId = "319ad6ef-e205-40f6-8572-f07a91545682",
                            RoleId = "fc516090-f789-4cdc-96f0-e760d98faae9"
                        },
                        new
                        {
                            UserId = "b2b5b822-cb50-426e-a504-6f4915f21273",
                            RoleId = "fc516090-f789-4cdc-96f0-e760d98faae9"
                        },
                        new
                        {
                            UserId = "f8686982-ee4d-499e-a4e0-4c0959937b3a",
                            RoleId = "fc516090-f789-4cdc-96f0-e760d98faae9"
                        },
                        new
                        {
                            UserId = "1ed4a5bc-23bb-47dd-b295-68a35d63ed21",
                            RoleId = "fc516090-f789-4cdc-96f0-e760d98faae9"
                        },
                        new
                        {
                            UserId = "cdf29e06-135e-499b-b905-e8e874fcb8e8",
                            RoleId = "fc516090-f789-4cdc-96f0-e760d98faae9"
                        },
                        new
                        {
                            UserId = "04a8917f-d72b-4731-9f96-9485a7174838",
                            RoleId = "fc516090-f789-4cdc-96f0-e760d98faae9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<string>>("ParticipantIds")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "0852fb74-bc2f-4689-bc4d-69429f7e1463",
                            AuthorId = "b2b5b822-cb50-426e-a504-6f4915f21273",
                            Content = "My co-worker Reed has one of these. He says it looks microscopic.",
                            CreatedDate = new DateTime(2025, 10, 3, 15, 36, 2, 450, DateTimeKind.Utc).AddTicks(1862),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 10, 5, 19, 36, 37, 176, DateTimeKind.Utc).AddTicks(6662),
                            Title = "Practical Concrete Pants"
                        },
                        new
                        {
                            Id = "99e08326-9fe0-41ec-b2dd-902486e86e66",
                            AuthorId = "b2b5b822-cb50-426e-a504-6f4915f21273",
                            Content = "one of my hobbies is baking. and when i'm baking this works great.",
                            CreatedDate = new DateTime(2025, 10, 22, 1, 28, 22, 932, DateTimeKind.Utc).AddTicks(3384),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 10, 6, 6, 21, 12, 455, DateTimeKind.Utc).AddTicks(2984),
                            Title = "Handmade Steel Shoes"
                        },
                        new
                        {
                            Id = "f4379633-226c-4af4-b139-b0c37463da7c",
                            AuthorId = "f8686982-ee4d-499e-a4e0-4c0959937b3a",
                            Content = "i use it from now on when i'm in my safehouse.",
                            CreatedDate = new DateTime(2025, 10, 4, 4, 9, 48, 464, DateTimeKind.Utc).AddTicks(8755),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 10, 16, 10, 51, 41, 748, DateTimeKind.Utc).AddTicks(3208),
                            Title = "Handmade Soft Tuna"
                        },
                        new
                        {
                            Id = "9553c5f8-0a61-4487-a318-7fb4cce40d53",
                            AuthorId = "f8686982-ee4d-499e-a4e0-4c0959937b3a",
                            Content = "My co-worker Linnie has one of these. He says it looks wide.",
                            CreatedDate = new DateTime(2025, 10, 25, 19, 46, 41, 56, DateTimeKind.Utc).AddTicks(9295),
                            IsHidden = true,
                            LastUpdatedDate = new DateTime(2025, 10, 31, 20, 16, 22, 206, DateTimeKind.Utc).AddTicks(9018),
                            Title = "Sleek Wooden Towels"
                        },
                        new
                        {
                            Id = "f4071906-6663-4cbf-85e1-a996f041e19e",
                            AuthorId = "1ed4a5bc-23bb-47dd-b295-68a35d63ed21",
                            Content = "I tried to scratch it but got cheeseburger all over it.",
                            CreatedDate = new DateTime(2025, 10, 31, 12, 28, 2, 252, DateTimeKind.Utc).AddTicks(7494),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 10, 3, 22, 9, 54, 929, DateTimeKind.Utc).AddTicks(9574),
                            Title = "Gorgeous Concrete Shoes"
                        },
                        new
                        {
                            Id = "b6724dca-3eaf-45f3-862a-b4aa1eb69c35",
                            AuthorId = "1ed4a5bc-23bb-47dd-b295-68a35d63ed21",
                            Content = "talk about bliss!!",
                            CreatedDate = new DateTime(2025, 10, 27, 1, 28, 35, 889, DateTimeKind.Utc).AddTicks(505),
                            IsHidden = true,
                            LastUpdatedDate = new DateTime(2025, 10, 20, 20, 59, 46, 678, DateTimeKind.Utc).AddTicks(6577),
                            Title = "Tasty Metal Ball"
                        },
                        new
                        {
                            Id = "098d0b22-f237-48d4-a031-5f1c6fd95ccf",
                            AuthorId = "cdf29e06-135e-499b-b905-e8e874fcb8e8",
                            Content = "My co-worker Merwin has one of these. He says it looks bubbly.",
                            CreatedDate = new DateTime(2025, 10, 25, 0, 59, 29, 674, DateTimeKind.Utc).AddTicks(3392),
                            IsHidden = true,
                            LastUpdatedDate = new DateTime(2025, 10, 28, 11, 57, 4, 340, DateTimeKind.Utc).AddTicks(6149),
                            Title = "Rustic Wooden Shirt"
                        },
                        new
                        {
                            Id = "d37ec644-c72f-47c9-9395-24ce59ec4da6",
                            AuthorId = "cdf29e06-135e-499b-b905-e8e874fcb8e8",
                            Content = "i use it until further notice when i'm in my nightclub.",
                            CreatedDate = new DateTime(2025, 10, 23, 17, 58, 50, 482, DateTimeKind.Utc).AddTicks(9045),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 10, 3, 21, 26, 56, 734, DateTimeKind.Utc).AddTicks(5583),
                            Title = "Gorgeous Soft Mouse"
                        },
                        new
                        {
                            Id = "ae336be4-74f1-4199-8148-700931729d79",
                            AuthorId = "04a8917f-d72b-4731-9f96-9485a7174838",
                            Content = "This Handcrafted Soft Shirt works considerably well. It mildly improves my basketball by a lot.",
                            CreatedDate = new DateTime(2025, 10, 8, 17, 28, 4, 827, DateTimeKind.Utc).AddTicks(9228),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 10, 31, 14, 32, 24, 277, DateTimeKind.Utc).AddTicks(1013),
                            Title = "Small Rubber Soap"
                        },
                        new
                        {
                            Id = "3e56dd78-23ed-4452-8b89-1c0c8c41ccf3",
                            AuthorId = "04a8917f-d72b-4731-9f96-9485a7174838",
                            Content = "this Incredible Metal Shirt is hyper.",
                            CreatedDate = new DateTime(2025, 10, 12, 19, 53, 38, 718, DateTimeKind.Utc).AddTicks(5090),
                            IsHidden = true,
                            LastUpdatedDate = new DateTime(2025, 10, 20, 9, 35, 40, 849, DateTimeKind.Utc).AddTicks(6353),
                            Title = "Licensed Steel Computer"
                        });
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("bytea");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25a4ec9f-50dd-44fc-89d1-a7685e022306",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac407112-267a-49b5-aaf5-b0b737536ca8",
                            CreatedAt = new DateTime(2025, 10, 3, 15, 2, 30, 790, DateTimeKind.Utc).AddTicks(1623),
                            Email = "kralmarko123@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marko",
                            LastName = "Markovikj",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRALMARKO123@GMAIL.COM",
                            NormalizedUserName = "KRALMARKO123@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPhq9cuTHMDurviBNXkjz5czSY/BzqqXbehWeVZPxKrs61nr/S2yunJ+OgnOhZMWnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9d4fe9a-dc1a-468d-bb61-ef5db3b24e04",
                            TwoFactorEnabled = false,
                            UserName = "kralmarko123@gmail.com"
                        },
                        new
                        {
                            Id = "319ad6ef-e205-40f6-8572-f07a91545682",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57f50ae6-38d4-4be5-b594-bacb0bf651c8",
                            CreatedAt = new DateTime(2025, 10, 3, 15, 2, 30, 790, DateTimeKind.Utc).AddTicks(3032),
                            Email = "test@test.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPwwTxWkZd4bOIOWSlaOVyhKuoy7l0snDPsoXlxdeDvE8dAFMepiqzMEkaKS+eC+kg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea1d4f9c-d69a-44f6-bf00-51b34ae63ee6",
                            TwoFactorEnabled = false,
                            UserName = "test@test.com"
                        },
                        new
                        {
                            Id = "b2b5b822-cb50-426e-a504-6f4915f21273",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d84c6432-4000-42f0-80c0-7113cdfa3f48",
                            CreatedAt = new DateTime(2025, 10, 16, 6, 22, 56, 391, DateTimeKind.Utc).AddTicks(6378),
                            Email = "Carol_Fritsch85@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Garrick",
                            LastName = "Padberg",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAROL_FRITSCH85@HOTMAIL.COM",
                            NormalizedUserName = "CAROL_FRITSCH85@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZ5EY0SjZbMiQXc6hPbi1hbVaRLn1goJjfkKlBV6PhUN+9VSKK8M/qLNCtT0Ccs2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e79edb56-6a8c-4284-b4d0-1cb32d399b48",
                            TwoFactorEnabled = false,
                            UserName = "Carol_Fritsch85@hotmail.com"
                        },
                        new
                        {
                            Id = "f8686982-ee4d-499e-a4e0-4c0959937b3a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecc057b3-2d73-442f-9da5-43a0d567819f",
                            CreatedAt = new DateTime(2025, 10, 13, 19, 9, 23, 519, DateTimeKind.Utc).AddTicks(5260),
                            Email = "Naomi_Gusikowski@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elmo",
                            LastName = "Heidenreich",
                            LockoutEnabled = false,
                            NormalizedEmail = "NAOMI_GUSIKOWSKI@HOTMAIL.COM",
                            NormalizedUserName = "NAOMI_GUSIKOWSKI@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPVE9MApcJ162eIYCStw6hSrx45QC88RReamqcKSL+38Yb1MNlaRlVODPuvyJfvGTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10b83614-9a11-4fe8-8989-dd4ff7814fe0",
                            TwoFactorEnabled = false,
                            UserName = "Naomi_Gusikowski@hotmail.com"
                        },
                        new
                        {
                            Id = "1ed4a5bc-23bb-47dd-b295-68a35d63ed21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffd93b23-8e22-40b2-a083-2984e8834655",
                            CreatedAt = new DateTime(2025, 10, 4, 18, 24, 47, 37, DateTimeKind.Utc).AddTicks(9953),
                            Email = "Edythe.Bergnaum@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Dana",
                            LastName = "Zboncak",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDYTHE.BERGNAUM@YAHOO.COM",
                            NormalizedUserName = "EDYTHE.BERGNAUM@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzPRzvlz+q7LikR7/HCOMDpQ6yxkY7tKkw0bo5lKRBhpWfUp/jsfg6BWkf0G//yuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8174f4bc-20c6-40e0-993d-3f52ee15dc24",
                            TwoFactorEnabled = false,
                            UserName = "Edythe.Bergnaum@yahoo.com"
                        },
                        new
                        {
                            Id = "cdf29e06-135e-499b-b905-e8e874fcb8e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17dc81ed-3495-4753-92eb-47d1d10b8bd8",
                            CreatedAt = new DateTime(2025, 10, 24, 8, 11, 12, 436, DateTimeKind.Utc).AddTicks(6456),
                            Email = "Mae.Ferry@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Elisha",
                            LastName = "Wintheiser",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAE.FERRY@GMAIL.COM",
                            NormalizedUserName = "MAE.FERRY@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBFOrtMix++xycJrig9ICb2L3lwUj7KulGtGwt/13+C3nLRP6TNWzEFjGiWP6wRPXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0600719-fe70-4ffd-b362-3e7f1c78d9a0",
                            TwoFactorEnabled = false,
                            UserName = "Mae.Ferry@gmail.com"
                        },
                        new
                        {
                            Id = "04a8917f-d72b-4731-9f96-9485a7174838",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cac8784-fffd-4fbe-a559-6c170f855a14",
                            CreatedAt = new DateTime(2025, 10, 20, 0, 38, 27, 613, DateTimeKind.Utc).AddTicks(4785),
                            Email = "Kay.Kiehn43@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Nicklaus",
                            LastName = "Schaefer",
                            LockoutEnabled = false,
                            NormalizedEmail = "KAY.KIEHN43@YAHOO.COM",
                            NormalizedUserName = "KAY.KIEHN43@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH9Nm42WKB8xWX3JnPCMNbclOGleWLDMU4VyjJb3I4TkdgsQvnagYDr/dn+Um5osJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5e486a5-0d31-49e0-94e5-605baf3e89b7",
                            TwoFactorEnabled = false,
                            UserName = "Kay.Kiehn43@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Message", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Post", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
