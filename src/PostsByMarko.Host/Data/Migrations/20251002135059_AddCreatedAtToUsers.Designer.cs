// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostsByMarko.Host.Data;

#nullable disable

namespace PostsByMarko.Host.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251002135059_AddCreatedAtToUsers")]
    partial class AddCreatedAtToUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3760e078-c3fb-4d15-8c0b-63c5247668f7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "289103e7-d4bd-4cb8-8f49-0047a888a811",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "04e54d11-5489-4a27-bb5e-5ba89ea961a3",
                            RoleId = "3760e078-c3fb-4d15-8c0b-63c5247668f7"
                        },
                        new
                        {
                            UserId = "04e54d11-5489-4a27-bb5e-5ba89ea961a3",
                            RoleId = "289103e7-d4bd-4cb8-8f49-0047a888a811"
                        },
                        new
                        {
                            UserId = "0eafdfb4-8ed2-4072-9fd5-1b4c44d4c840",
                            RoleId = "289103e7-d4bd-4cb8-8f49-0047a888a811"
                        },
                        new
                        {
                            UserId = "22b10fc8-60e0-4a76-b3a8-3f6d774a0cf1",
                            RoleId = "289103e7-d4bd-4cb8-8f49-0047a888a811"
                        },
                        new
                        {
                            UserId = "e6107e0a-5cef-49a6-b051-59b8d0f840da",
                            RoleId = "289103e7-d4bd-4cb8-8f49-0047a888a811"
                        },
                        new
                        {
                            UserId = "589490e5-f0c5-4789-bcca-6dc281c1dade",
                            RoleId = "289103e7-d4bd-4cb8-8f49-0047a888a811"
                        },
                        new
                        {
                            UserId = "512fc521-1e45-4333-8aa5-0d728829cc6a",
                            RoleId = "289103e7-d4bd-4cb8-8f49-0047a888a811"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = "2028d319-293e-4381-836c-9d67ebe866b7",
                            AuthorId = "e6107e0a-5cef-49a6-b051-59b8d0f840da",
                            Content = "I saw this on TV and wanted to give it a try.",
                            CreatedDate = new DateTime(2025, 9, 27, 15, 12, 35, 942, DateTimeKind.Utc).AddTicks(6057),
                            IsHidden = true,
                            LastUpdatedDate = new DateTime(2025, 9, 27, 3, 11, 52, 85, DateTimeKind.Utc).AddTicks(2246),
                            Title = "Fantastic Granite Towels"
                        },
                        new
                        {
                            Id = "7fe9d149-1f66-49f7-9db8-3fe9cc440e38",
                            AuthorId = "e6107e0a-5cef-49a6-b051-59b8d0f840da",
                            Content = "I saw one of these in Tanzania and I bought one.",
                            CreatedDate = new DateTime(2025, 9, 27, 20, 58, 15, 695, DateTimeKind.Utc).AddTicks(8109),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 9, 2, 19, 9, 8, 667, DateTimeKind.Utc).AddTicks(3511),
                            Title = "Rustic Metal Sausages"
                        },
                        new
                        {
                            Id = "6eb8e634-d1f8-40a0-b89e-140610a4cdb4",
                            AuthorId = "e6107e0a-5cef-49a6-b051-59b8d0f840da",
                            Content = "My neighbor Georgie has one of these. She works as a busboy and she says it looks brown.",
                            CreatedDate = new DateTime(2025, 9, 26, 14, 41, 42, 759, DateTimeKind.Utc).AddTicks(4517),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 9, 3, 12, 51, 52, 277, DateTimeKind.Utc).AddTicks(7300),
                            Title = "Handmade Granite Cheese"
                        },
                        new
                        {
                            Id = "26c4ad3d-41dc-442b-9694-2b008c0729ae",
                            AuthorId = "589490e5-f0c5-4789-bcca-6dc281c1dade",
                            Content = "My neighbor Elisha has one of these. She works as a fortune teller and she says it looks floppy.",
                            CreatedDate = new DateTime(2025, 9, 19, 6, 43, 31, 790, DateTimeKind.Utc).AddTicks(8137),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 9, 27, 7, 10, 57, 655, DateTimeKind.Utc).AddTicks(2317),
                            Title = "Incredible Cotton Car"
                        },
                        new
                        {
                            Id = "cbabfbe7-9c91-43e5-86de-e3dcf25a3ebb",
                            AuthorId = "589490e5-f0c5-4789-bcca-6dc281c1dade",
                            Content = "The box this comes in is 5 foot by 6 inch and weights 17 pound!!!",
                            CreatedDate = new DateTime(2025, 9, 3, 10, 53, 26, 282, DateTimeKind.Utc).AddTicks(1810),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 9, 12, 1, 16, 11, 951, DateTimeKind.Utc).AddTicks(2811),
                            Title = "Sleek Metal Chair"
                        },
                        new
                        {
                            Id = "b95b82f4-7e6d-46a6-b61f-54a7b14971f8",
                            AuthorId = "589490e5-f0c5-4789-bcca-6dc281c1dade",
                            Content = "I tried to slay it but got truffle all over it.",
                            CreatedDate = new DateTime(2025, 9, 5, 2, 39, 21, 850, DateTimeKind.Utc).AddTicks(7076),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 10, 1, 9, 37, 48, 200, DateTimeKind.Utc).AddTicks(4627),
                            Title = "Fantastic Granite Pizza"
                        },
                        new
                        {
                            Id = "04077f50-65a6-4b36-b010-32120e34e23a",
                            AuthorId = "512fc521-1e45-4333-8aa5-0d728829cc6a",
                            Content = "This Handcrafted Cotton Bacon works so well. It imperfectly improves my baseball by a lot.",
                            CreatedDate = new DateTime(2025, 9, 23, 9, 11, 1, 333, DateTimeKind.Utc).AddTicks(5414),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 9, 21, 17, 42, 18, 979, DateTimeKind.Utc).AddTicks(5762),
                            Title = "Rustic Plastic Pizza"
                        },
                        new
                        {
                            Id = "00693ea7-573c-4a7c-ae9c-7b48d56b1e31",
                            AuthorId = "512fc521-1e45-4333-8aa5-0d728829cc6a",
                            Content = "It only works when I'm Argentina.",
                            CreatedDate = new DateTime(2025, 9, 12, 2, 11, 3, 891, DateTimeKind.Utc).AddTicks(283),
                            IsHidden = false,
                            LastUpdatedDate = new DateTime(2025, 9, 22, 13, 23, 29, 499, DateTimeKind.Utc).AddTicks(9250),
                            Title = "Ergonomic Frozen Salad"
                        },
                        new
                        {
                            Id = "47807512-6f2d-45ad-8bb6-209b2d00cfe1",
                            AuthorId = "512fc521-1e45-4333-8aa5-0d728829cc6a",
                            Content = "This Refined Wooden Pants works outstandingly well. It beautifully improves my basketball by a lot.",
                            CreatedDate = new DateTime(2025, 9, 23, 4, 18, 0, 752, DateTimeKind.Utc).AddTicks(4635),
                            IsHidden = true,
                            LastUpdatedDate = new DateTime(2025, 9, 29, 16, 37, 30, 244, DateTimeKind.Utc).AddTicks(4867),
                            Title = "Refined Steel Towels"
                        });
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("bytea");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "04e54d11-5489-4a27-bb5e-5ba89ea961a3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95147b46-0929-43e3-abe8-490d5835014b",
                            CreatedAt = new DateTime(2025, 10, 2, 13, 50, 58, 282, DateTimeKind.Utc).AddTicks(2479),
                            Email = "kralmarko123@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Marko",
                            LastName = "Markovikj",
                            LockoutEnabled = false,
                            NormalizedEmail = "KRALMARKO123@GMAIL.COM",
                            NormalizedUserName = "KRALMARKO123@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMJ7YV1bprWxC6z3dz1Z29dQletH5Nr/2lht7ZhDA7YOcGv3Hk6IojQgAC12VkIyfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5972e16d-e5b5-4851-ab2e-e793a50d2611",
                            TwoFactorEnabled = false,
                            UserName = "kralmarko123@gmail.com"
                        },
                        new
                        {
                            Id = "0eafdfb4-8ed2-4072-9fd5-1b4c44d4c840",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db06f99b-5530-4359-9ef9-f118fdf6549a",
                            CreatedAt = new DateTime(2025, 10, 2, 13, 50, 58, 282, DateTimeKind.Utc).AddTicks(2963),
                            Email = "test@test.com",
                            EmailConfirmed = true,
                            FirstName = "Test",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDf+os0nozU70ylEm9JSer2SpyG/VArG6F34c7IQzeXOVWFDVCIsxBGZTPjpFSU1JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68e5d95e-14ac-47c8-a159-dac683554b47",
                            TwoFactorEnabled = false,
                            UserName = "test@test.com"
                        },
                        new
                        {
                            Id = "22b10fc8-60e0-4a76-b3a8-3f6d774a0cf1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ca5e8ec-9d8d-4f1e-8e21-4e5628830416",
                            CreatedAt = new DateTime(2025, 10, 2, 13, 50, 58, 282, DateTimeKind.Utc).AddTicks(2979),
                            Email = "ryanfirth@generic.com",
                            EmailConfirmed = true,
                            FirstName = "Ryan",
                            LastName = "Firth",
                            LockoutEnabled = false,
                            NormalizedEmail = "RYANFIRTH@GENERIC.COM",
                            NormalizedUserName = "RYANFIRTH@GENERIC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECn45if8UnldIXOSQ70jzDkmcAXqn6gORyPk5WZ46F6e7G7dCn4JhbNP33TK09ADOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f368cf1d-b16d-4ffb-9062-07b39736567f",
                            TwoFactorEnabled = false,
                            UserName = "ryanfirth@generic.com"
                        },
                        new
                        {
                            Id = "e6107e0a-5cef-49a6-b051-59b8d0f840da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a1ce3f7-f5c1-461a-a90c-0ac5ef47ed8d",
                            CreatedAt = new DateTime(2025, 10, 2, 13, 50, 58, 408, DateTimeKind.Utc).AddTicks(2352),
                            Email = "Lisa_Emard@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Makenna",
                            LastName = "Franecki",
                            LockoutEnabled = false,
                            NormalizedEmail = "LISA_EMARD@HOTMAIL.COM",
                            NormalizedUserName = "LISA_EMARD@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOaAxciXy8iQDuC2wiW9654TpmzG5d1D+na7EakkSTcLJ4tGsv8Ja+T/pVP7ays1AA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11e2f54a-a621-4926-96b1-018e48b6860b",
                            TwoFactorEnabled = false,
                            UserName = "Lisa_Emard@hotmail.com"
                        },
                        new
                        {
                            Id = "589490e5-f0c5-4789-bcca-6dc281c1dade",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84659402-781f-410b-9bc8-b007f0b17bcb",
                            CreatedAt = new DateTime(2025, 10, 2, 13, 50, 58, 408, DateTimeKind.Utc).AddTicks(7961),
                            Email = "Jolie_Kunde18@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Peyton",
                            LastName = "Lueilwitz",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOLIE_KUNDE18@GMAIL.COM",
                            NormalizedUserName = "JOLIE_KUNDE18@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOTa0ilsXgo3KFJggrpGA1bfqdjx8P+w4T47k7b+27wg6yIgHaYWq9W/kMbkzaoBKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15f54b25-5827-44e9-889d-fdcaa4b3ae24",
                            TwoFactorEnabled = false,
                            UserName = "Jolie_Kunde18@gmail.com"
                        },
                        new
                        {
                            Id = "512fc521-1e45-4333-8aa5-0d728829cc6a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e347b04f-5811-415c-b018-039f2f9a57f4",
                            CreatedAt = new DateTime(2025, 10, 2, 13, 50, 58, 408, DateTimeKind.Utc).AddTicks(8012),
                            Email = "Chasity.Nader@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ally",
                            LastName = "Kirlin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHASITY.NADER@YAHOO.COM",
                            NormalizedUserName = "CHASITY.NADER@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAk4KthOHWRxVSND3HZbpNqeXGx6VSbEvQdqVcu+NzKvWl61m0KfhWiw6u6JMexOiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95d8ea03-33dc-4506-91a2-95a3c01b9dd7",
                            TwoFactorEnabled = false,
                            UserName = "Chasity.Nader@yahoo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.Post", b =>
                {
                    b.HasOne("PostsByMarko.Host.Data.Models.User", null)
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostsByMarko.Host.Data.Models.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
